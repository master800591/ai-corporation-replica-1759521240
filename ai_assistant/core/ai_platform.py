#!/usr/bin/env python3
"""
AI Platform Enhanced - Code Generation & Environment Management
Autonomous AI Development Platform with actual code generation and folder management
"""

import os
import json
import logging
import shutil
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path

from ..utils.logging import get_logger

logger = get_logger(__name__)

def check_imports():
    """Check availability of required components"""
    components = {
        'crewai': False,
        'agents': False,
        'tasks': False,
        'p2p': False
    }
    
    try:
        import crewai
        components['crewai'] = True
        logger.info("[OK] CrewAI available")
    except ImportError:
        logger.warning("[MISSING] CrewAI not available")
    
    try:
        from ..p2p import P2PNode
        components['p2p'] = True
        logger.info("[OK] P2P Toolkit available")
    except ImportError:
        logger.warning("[MISSING] P2P Toolkit not available")
    
    return components

class AIPlatformEnhanced:
    """Enhanced AI Platform with actual code generation and environment management"""
    
    def __init__(self, workspace_root: Optional[str] = None):
        logger.info("[INIT] Starting AI Platform Enhanced...")
        
        # Set workspace root
        self.workspace_root = workspace_root or os.getcwd()
        self.dev_folder = os.path.join(self.workspace_root, "dev")
        self.test_folder = os.path.join(self.workspace_root, "test")
        self.production_folder = os.path.join(self.workspace_root, "production")
        
        # Check component availability
        self.components = check_imports()
        
        # Initialize counters and tracking
        self.operations_count = 0
        self.version = "2.0.0-enhanced"
        self.projects: Dict[str, Any] = {}
        
        # Create development environments
        self.setup_development_environments()
        
        # Initialize P2P if available
        self.p2p_node = None
        if self.components['p2p']:
            try:
                from ..p2p import P2PNode
                self.p2p_node = P2PNode(name=f"AI-Platform-{self.version}")
                logger.info("[OK] P2P Node initialized")
            except Exception as e:
                logger.error(f"[ERROR] Error initializing P2P: {e}")
        
        logger.info("[SUCCESS] AI Platform Enhanced initialized successfully!")
    
    def setup_development_environments(self):
        """Create and organize development, test, and production folders"""
        logger.info("[SETUP] Creating development environments...")
        
        environments = {
            'dev': {
                'path': self.dev_folder,
                'description': 'Development environment for active coding',
                'subfolders': ['src', 'modules', 'experiments', 'drafts']
            },
            'test': {
                'path': self.test_folder,
                'description': 'Testing environment for validation',
                'subfolders': ['unit_tests', 'integration_tests', 'test_data', 'reports']
            },
            'production': {
                'path': self.production_folder,
                'description': 'Production-ready code and deployments',
                'subfolders': ['releases', 'deployments', 'docs', 'configs']
            }
        }
        
        for env_name, env_config in environments.items():
            # Create main environment folder
            os.makedirs(env_config['path'], exist_ok=True)
            
            # Create subfolders
            for subfolder in env_config['subfolders']:
                subfolder_path = os.path.join(env_config['path'], subfolder)
                os.makedirs(subfolder_path, exist_ok=True)
            
            # Create README for each environment
            readme_path = os.path.join(env_config['path'], 'README.md')
            if not os.path.exists(readme_path):
                readme_content = f"""# {env_name.upper()} Environment

{env_config['description']}

## Structure
"""
                for subfolder in env_config['subfolders']:
                    readme_content += f"- `{subfolder}/`: {self.get_folder_description(subfolder)}\n"
                
                readme_content += f"""
## Generated by AI Platform Enhanced
- Created: {datetime.now().isoformat()}
- Version: {self.version}
"""
                
                with open(readme_path, 'w', encoding='utf-8') as f:
                    f.write(readme_content)
            
            logger.info(f"[OK] {env_name.upper()} environment ready: {env_config['path']}")
    
    def get_folder_description(self, folder_name: str) -> str:
        """Get description for folder types"""
        descriptions = {
            'src': 'Source code files and main modules',
            'modules': 'Reusable code modules and libraries',
            'experiments': 'Experimental code and prototypes',
            'drafts': 'Work-in-progress code drafts',
            'unit_tests': 'Unit test files and test cases',
            'integration_tests': 'Integration and system tests',
            'test_data': 'Test data files and fixtures',
            'reports': 'Test reports and coverage data',
            'releases': 'Versioned production releases',
            'deployments': 'Deployment scripts and configurations',
            'docs': 'Production documentation',
            'configs': 'Production configuration files'
        }
        return descriptions.get(folder_name, 'Project files and resources')
    
    def create_project_structure(self, project_name: str, project_type: str = "python") -> str:
        """Create a complete project structure in the dev environment"""
        logger.info(f"[CREATE] Setting up project: {project_name}")
        
        project_path = os.path.join(self.dev_folder, 'src', project_name)
        os.makedirs(project_path, exist_ok=True)
        
        # Project structure based on type
        if project_type == "python":
            structure = {
                '__init__.py': f'"""{project_name} - AI Generated Project"""',
                'main.py': self.generate_main_py_template(project_name),
                'config.py': self.generate_config_template(),
                'requirements.txt': 'requests>=2.25.0\npython-dateutil>=2.8.0\n'
            }
        elif project_type == "web":
            structure = {
                'app.py': self.generate_flask_app_template(project_name),
                'requirements.txt': 'flask\nrequests\n'
            }
        else:
            structure = {
                'README.md': f'# {project_name}\n\nAI Generated Project\n',
                'main.py': f'# {project_name} - Main Module\n\nprint("Hello from {project_name}!")\n'
            }
        
        # Create files
        for file_path, content in structure.items():
            full_path = os.path.join(project_path, file_path)
            os.makedirs(os.path.dirname(full_path), exist_ok=True)
            
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
        
        # Track project
        self.projects[project_name] = {
            'type': project_type,
            'dev_path': project_path,
            'created': datetime.now().isoformat(),
            'status': 'development'
        }
        
        logger.info(f"[OK] Project {project_name} created at: {project_path}")
        return project_path
    
    def generate_main_py_template(self, project_name: str) -> str:
        """Generate a main.py template"""
        return f'''#!/usr/bin/env python3
"""
{project_name} - AI Generated Project
Created by AI Platform Enhanced on {datetime.now().strftime("%Y-%m-%d")}
"""

def main():
    """Main entry point for {project_name}"""
    print(f"Welcome to {project_name}!")
    print("Generated by AI Platform Enhanced")

if __name__ == "__main__":
    main()
'''

    def generate_config_template(self) -> str:
        """Generate a config.py template"""
        return f'''"""
Configuration module for AI generated project
"""

import os
from datetime import datetime

class Config:
    """Application configuration"""
    
    VERSION = "1.0.0"
    DEBUG = os.getenv("DEBUG", "False").lower() == "true"
    CREATED_DATE = "{datetime.now().isoformat()}"

# Global config instance
config = Config()
'''

    def generate_flask_app_template(self, project_name: str) -> str:
        """Generate Flask app template"""
        return f'''#!/usr/bin/env python3
"""
{project_name} - AI Generated Flask Web Application
"""

from flask import Flask, jsonify
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def index():
    """Home page"""
    return jsonify({{
        'project': '{project_name}',
        'status': 'online',
        'timestamp': datetime.now().isoformat(),
        'generated_by': 'AI Platform Enhanced'
    }})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
'''

    def get_project_status(self) -> Dict[str, Any]:
        """Get overall project status"""
        return {
            'platform_version': self.version,
            'workspace_root': self.workspace_root,
            'projects_count': len(self.projects),
            'operations_count': self.operations_count,
            'components': self.components,
            'environments': {
                'dev': os.path.exists(self.dev_folder),
                'test': os.path.exists(self.test_folder),
                'production': os.path.exists(self.production_folder)
            }
        }

if __name__ == "__main__":
    # Demo usage
    platform = AIPlatformEnhanced()
    
    # Create a sample project
    project_path = platform.create_project_structure("sample_project", "python")
    print(f"Created project at: {project_path}")
    
    # Show status
    status = platform.get_project_status()
    print(f"Platform status: {status}")